#!/bin/sh

set -e;

# echo -e "docker-entrypoint ${@}";

USER_NAME='tang';

main() {

  echo -e "[docker-entrypoint] main(${@})";

  init_user;
  update_file_permissions;

  exec su-exec ${PUID}:${PGID} /usr/bin/run-app "${@}";
}

init_user() {

  # echo -e "[docker-entrypoint] init_user()";

  if [[ -z "${PUID}" ]]; then echo -e "error - PUID env var not set"; exit 1; fi;
  if [[ -z "${PGID}" ]]; then echo -e "error - PGID env var not set"; exit 1; fi;

  # get the current uid/gid of $USER_NAME
  local CURR_UID="$(getent passwd "${USER_NAME}" | cut -f3 -d: || true)";
  local CURR_GID="$(getent group "${USER_NAME}" | cut -f3 -d: || true)";

  if [[ "${CURR_UID}" != "${PUID}" ]] || [[ "${CURR_GID}" != "${PGID}" ]]; then

    echo -e "[docker-entrypoint] init_user() initializing user: ${USER_NAME} (${PUID}),(${PGID})";

    # purge conflicting users/groups
    if getent passwd "${USER_NAME}"; then
      echo -e "[docker-entrypoint] init_user() deleting existing user with name: ${USER_NAME}";
      deluser "${USER_NAME}";
    fi;
    if getent passwd "${PUID}"; then
      echo -e "[docker-entrypoint] init_user() deleting existing user with id:${PUID}";
      deluser "$(getent passwd ${PUID} | cut -d: -f1)";
    fi;
    if getent group "${USER_NAME}"; then
      echo -e "[docker-entrypoint] init_user() deleting existing group with name: ${USER_NAME}";
      delgroup "${USER_NAME}";
    fi;
    if getent group "${PGID}"; then
      echo -e "[docker-entrypoint] init_user() deleting existing group with id: ${PGID}";
      delgroup "$(getent group ${PGID} | cut -d: -f1)";
    fi;

    # add new group
    echo -e "[docker-entrypoint] init_user() creating new group ${USER_NAME} (${PGID})";
    addgroup -g "${PGID}" "${USER_NAME}";

    echo -e "[docker-entrypoint] init_user() creating new user ${USER_NAME} (${PUID})";
    adduser \
      --home "/home/${USER_NAME}" \
      --gecos "${USER_NAME}" \
      --ingroup "${USER_NAME}" \
      --disabled-password \
      --uid "${PUID}" \
      ${USER_NAME};

  else
    echo -e "[docker-entrypoint] init_user() user already set up";
  fi;
}

update_file_permissions() {

  echo -e "[docker-entrypoint] update_file_permissions()";

  # update var permissions
  chown -R ${PUID}:${PGID} ${TANG_DB};
  chmod -R 440 ${TANG_DB}; # set read-only permissions on all keys
  chmod 770 ${TANG_DB}; # reset group/owner rwx permissions on tang db dir
}

main "${@}";
